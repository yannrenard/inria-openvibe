/**
 * \page Doc_DriverCheckAndCorrection Tutorial: Using the built-in Impedance Checker and Jitter Correcter in a driver
 *
 * - - \b NB: Tutorial based on <b> OpenViBE 0.6.1 </b> (20-may-2010).
 *
 * \section Doc_DriverCheckAndCorrection_Introduction Introduction
 *
 * The OpenViBE framework provides some mechanisms to improve your acquisition drivers. The first one is an Impedance Checker : 
 * If your device is capable of giving impedance values you can give them to the impedance checker, and in few lines of code 
 * you will have real-time feedback on the impedance of the electrodes when you connect the driver.
 * The second tool is the jitter monitoring and correction. You can ask the driver to compare in real-time the number of
 * samples sent by the driver to the theorical sample count, based on the sampling frequency. If the difference between these values 
 * rises too high, you can ask the driver to correct the jitter automatically.
 * This tutorial covers both of these two optional mechanisms, how they work and how to integrate it in your driver.
 *
 * \section Doc_DriverCheckAndCorrection_ImpedanceChecker Impedance Checker
 * 
 * \subsection Doc_DriverCheckAndCorrection_ImpedanceChecker_Warning Warning
 * 
 * In order to use properly the impedance checker, you have to be sure that :
 * - Your acquisition device has an "Impedance" mode
 * - The device and/or the electrodes <b>won't be damaged</b> by using the impedance acquisition mode
 * Among the devices, the g.Tec gUSBAmp and the Micromed SD LTM can acquire impedance values of each electrode connected. The MindMedia NeXus32B
 *
 \code
 CDriverGTecGUSBamp::CDriverGTecGUSBamp(IDriverContext& rDriverContext)
	:IDriver(rDriverContext)
	,m_pCallback(NULL)
	,m_ui32SampleCountPerSentBlock(0)
	//...
	{
		m_oHeader.setSamplingFrequency(512);
		m_oHeader.setChannelCount(16);

		m_bImpedanceCheck=m_rDriverContext.getConfigurationManager().expandAsBoolean("${AcquisitionServer_CheckImpedance}", false);
		m_rDriverContext.getLogManager() << LogLevel_Trace << (m_bImpedanceCheck?"Impedance will be checked":"Impedance won't be checked") << "\n";
	}
 \endcode
 */
