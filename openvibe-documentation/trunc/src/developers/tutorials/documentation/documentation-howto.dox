/*
 * \page Doc_DocumentationHowTo Writing documentation for §OpenViBE§
 <p><div class="important"> 
 This documentation page is deprecated since OpenViBE 0.12.0 (oct 2011), and won't be maintained.
 </br>
 The new documentation page can be found \htmlonly <a href="http://openvibe.inria.fr/writing-box-documentation/"> here </a> \endhtmlonly.</div></p>
 </br>
 </br>
 *
 * - \b NB: Document based on <b> OpenViBE 0.5.0 </b> (18-feb-2010).
 *
 * The goal of this page is to propose a way to produce §OpenViBE§ documentation for developers.
 *
 * \section Doc_DocumentationHowTo_Developers Writing documentation for developers
 * TODO
 * \subsection Doc_DocumentationHowTo_Developers_API Writing API documentation
 * TODO
 * \subsection Doc_DocumentationHowTo_Developers_Applications Writing application documentation
 * TODO
 * \subsection Doc_DocumentationHowTo_Developers_Kernel Writing kernel documentation
 * TODO
 * \subsection Doc_DocumentationHowTo_Developers_Algorithms Writing algorithm documentation
 * TODO
 * \subsection Doc_DocumentationHowTo_Developers_BoxAlgorithms Writing box-algorithm documentation
 * TODO
 * \section Doc_DocumentationHowTo_Users Writing documentation for users
 * TODO
 * \subsection Doc_DocumentationHowTo_Users_Applications Writing application documentation
 * TODO
 */

/**
 * \page Doc_DocumentationHowTo_Users_BoxAlgorithms Writing box-algorithm documentation
 * \section Doc_DocumentationHowTo_Users_BoxAlgorithms_Introduction Introduction
 *
 * Any box algorithm that gets added to the platform should come with its associated documentation.
 * In order to make things more readable, a documentation template was defined which all box 
 * algorithm documentation files should follow. Writing box algorithm documentation thus consists in following this template and customizing
 * it with box specific information such as its name, role, behaviour and so on.
 *
 * Beside being a very repetitive task, writing documentation can become extremely time-consuming
 * when it comes to maintaining it as the number of box algorithms keeps growing. To make things easier
 * and faster, we propose to generate some parts of the documentation, leaving it up to developers
 * to write those parts of the documentation that are box-specific. Writing documentation this way guarantees that all
 * pages will all have the same aspect and structure, making it easier to navigate through them.
 *
 * The \ref Doc_PluginInspector "plugin inspector" application is responsible for the generation
 * of several documentation elements for each box algorithm. 
 * - An up-to-date snapshot of each box, as it would appear in the \ref Doc_Application_Designer Designer 
 * - A template documentation for each box, as "skeleton" file
 *
 * This skeleton contains several tags which act as placeholders, indicating where human-written documentation should be inserted. 
 * Of course, skeleton files should never be modified by hand, but instead they may be regenerated by the plugin inspector if needed.
 * As for human written documentation, it should be written in external files and use the same tags as the skeleton file to
 * identify its different sections.
 *
 * By following this procedure, it is possible for CMake to produce a complete documentation source file from the skeleton file and 
 * the human-written file. Pieces of human-written documentation can be inserted at the correct location in the skeleton file, 
 * based on tags found in both files. Doxygen then parses this source to produce the final HTML page.
 *
 * \image html documentation-howto.png "Production pipeline of box algorithm user documentation"
 *
 * Human-written documentation files should have the extension \e .dox-part to be considered as
 * candidates by CMake for filling skeleton files. Skeleton files should have the extension
 * \e .dox-skeleton .
 *
 * As stated before, human-written documentation should make use of tags for CMake to know where
 * to insert individual pieces of documentation in the skeleton. These tags look like the following :
 * \c |OVP_DocBegin_NameOfYourBox_NameOfThePart| and
 * \c |OVP_DocEnd_NameOfYourBox_NameOfThePart| .
 *
 * Possible documentation part names include:
 *  - \c Description A global, detailed description of the box algorithm.
 *  - \c Inputs A global introduction to box inputs.
 *  - \c Input\e 1 - \c Input\e n : Description of each input of the box algorithm.
 *  - \c Outputs A global introduction to box outputs.
 *  - \c Output\e 1 - \c Output\e n : Description of each output.
 *  - \c Settings A global introduction to box settings.
 *  - \c Setting\e 1 - \c Setting\e n : Description of each setting.
 *  - \c Examples In this section some typical uses of the box may be mentioned, and/or some sample scenarios/tutorials making use of this box
 * may be detailed.
 *  - \c Miscellaneous Any additional information about this box may be mentioned here, including known bugs, performance issues, related boxes, etc.
 *
 * \section Doc_DocumentationHowTo_Users_BoxAlgorithms_Procedure The procedure
 * 
 * Here is the step-by-step procedure to generate the documentation.
 *  - Doxygen is not a part of the OpenViBE dependencies, you have to manually install it. You can download Doxygen 
 \htmlonly <a href="http://www.stack.nl/~dimitri/doxygen/index.html "> here </a> \endhtmlonly .
 *  - Check the <em>linux-init_env_command</em> script (or <em>win32-init_env_command.cmd</em> on Windows) to be sure that the build process includes your branch.
 *  - Build OpenViBE, using the provided script.
 *  - Go in the generated <em>dist</em> folder, and launch the Plugin Inspector. 
 *  - All <em>dox-part-skeleton</em> and <em>dox-skeleton</em> files are generated in  <em>openvibe-documentation/trunc/src/box-algorithm-doc</em>.
 *  - Complete the file <em>Doc_BoxAlgorithm_YourBoxName.dox-part-skeleton</em> with your documentation, and rename the file with the extension <em>dox-part</em>.
 *  - Move the <em>dox-part</em> file in the <em>/src/doc</em> directory of your project, in your own branch.
 *  - Check the <em>linux-init_env_command</em> script (or <em>win32-init_env_command.cmd</em> on Windows) to be sure that \b all projects are built, including <em>openvibe-documentation</em>.
 *  - Build OpenViBE once again. The HTML documentation is generated in <em>dist/doc/openvibe/html</em>.
 *  - Enjoy a cup of coffee.
 *
 * \section Doc_DocumentationHowTo_Users_BoxAlgorithms_Example Example
 *
 * As an example, we will look at the documentation of the \ref Doc_BoxAlgorithm_BrainampFileReader.
 *
 * \subsection Doc_DocumentationHowTo_Users_BoxAlgorithms_Example_DoxSekeleton 1. The .dox-skeleton file
 *
 * The \c .dox-sekeleton file generated by the \e plugin-inspector for this box algorithm looks like this :
 *
 * \verbinclude "Doc_BoxAlgorithm_BrainampFileReader.dox-skeleton"
 *
 * As you can see, several placeholders exist in this file. They are tagged in
 * order to identify where hand written documentation parts should be inserted. Examples of such tags include :
 *  - \c \@Doc_BoxAlgorithm_BrainampFileReader_Description_Content\@
 *  - \c \@Doc_BoxAlgorithm_BrainampFileReader_Output0_Content\@
 *  - etc...
 *
 * \subsection Doc_DocumentationHowTo_Users_BoxAlgorithms_Example_DoxPart 2. The .dox-part file
 *
 * Documenting this box for its potential users and from a developer point of view 
 * consists in creating a \c .dox-part file with different tagged sections.
 * Tags should follow the following structure :
 * \c |OVP_DocBegin_NameOfYourBox_NameOfThePart| and
 * \c |OVP_DocEnd_NameOfYourBox_NameOfThePart| tags, where NameOfThePart should be replaced
 * with the appropriate token depending on what aspect of the box is being documented.
 *
 * A typical tagged \c .dox-part file would look like the following :
 *
 * \verbinclude "Doc_BoxAlgorithm_BrainampFileReader.dox-part"
 *
 * Given this \c .dox-part file, CMake is able to produce the final
 * Doxygen source file, inserting each tagged part in the \c .dox-skeleton file.
 *
 * \subsection Doc_DocumentationHowTo_Users_BoxAlgorithms_Example_FinalDox 3. The final documentation source
 *
 * Given the two previous files, CMake will be able to generate the
 * final documentation source, replacing \c \\@\\@ delimited tokens with their
 * respective human-written documentation parts.
 *
 * The final file would look like the following :
 *
 * \verbinclude "Doc_BoxAlgorithm_BrainampFileReader.dox"
 *
 * Notice how only text lying within a \c |OVP_DocBegin_NameOfYourBox_NameOfThePart|
 * and \c |OVP_DocEnd_NameOfYourBox_NameOfThePart| tag pair was included in the final source file, while
 * the rest was discarded by CMake.
 *
 * The HTML page corresponding to this source can be seen on the
 * \ref Doc_BoxAlgorithm_BrainampFileReader page !
 */
