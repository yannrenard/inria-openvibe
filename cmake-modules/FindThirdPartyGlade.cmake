# ---------------------------------
# Finds GLADE toolkit
#
# Sets GLADE_FOUND
# Sets GLADE_LIBRARIES
# Sets GLADE_LIBRARY_DIRS
# Sets GLADE_LDFLAGS
# Sets GLADE_LDFLAGS_OTHERS
# Sets GLADE_INCLUDE_DIRS
# Sets GLADE_CFLAGS
# Sets GLADE_CFLAGS_OTHERS
# ---------------------------------

INCLUDE("FindThirdPartyPkgConfig")
pkg_check_modules(GLADE libglade-2.0)

IF(GLADE_FOUND)
	MESSAGE(STATUS "  Found glade...")
	INCLUDE_DIRECTORIES(${GLADE_INCLUDE_DIRS})
	ADD_DEFINITIONS(${GLADE_CFLAGS})
	ADD_DEFINITIONS(${GLADE_CFLAGS_OTHERS})
	LINK_DIRECTORIES(${GLADE_LIBRARY_DIRS})
	FOREACH(GLADE_LIB ${GLADE_LIBRARIES})
		SET(GLADE_LIB1 "GLADE_LIB1-NOTFOUND")
		FIND_LIBRARY(GLADE_LIB1 NAMES ${GLADE_LIB} PATHS ${GLADE_LIBRARY_DIRS} ${GLADE_LIBDIR} NO_DEFAULT_PATH)
		FIND_LIBRARY(GLADE_LIB1 NAMES ${GLADE_LIB})
		IF(GLADE_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${GLADE_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${GLADE_LIB1})
		ELSE(GLADE_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${GLADE_LIB}")
		ENDIF(GLADE_LIB1)
	ENDFOREACH(GLADE_LIB)
ELSE(GLADE_FOUND)
	MESSAGE(STATUS "  FAILED to find glade...")
ENDIF(GLADE_FOUND)
