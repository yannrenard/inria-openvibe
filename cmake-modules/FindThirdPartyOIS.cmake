# ---------------------------------
# Finds OIS toolkit
#
# Sets OIS_FOUND
# Sets OIS_LIBRARIES
# Sets OIS_LIBRARY_DIRS
# Sets OIS_LDFLAGS
# Sets OIS_LDFLAGS_OTHERS
# Sets OIS_INCLUDE_DIRS
# Sets OIS_CFLAGS
# Sets OIS_CFLAGS_OTHERS
#
# Adds library to target
# Adds include path
# ---------------------------------

IF(WIN32)
	FIND_PATH(PATH_OIS include/OIS/OIS.h PATHS $ENV{OV_DEP_OGRE} $ENV{OGRE_HOME})
	IF(PATH_OIS)
		SET(OIS_FOUND TRUE)
		SET(OIS_INCLUDE_DIRS ${PATH_OIS}/include/OIS)
		IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
			SET(OIS_LIBRARIES OIS_d)
		ELSE(CMAKE_BUILD_TYPE STREQUAL "Debug")
			SET(OIS_LIBRARIES OIS)
		ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
		SET(OIS_LIBRARY_DIRS ${PATH_OIS}/lib/OIS )
	ENDIF(PATH_OIS)
ENDIF(WIN32)

IF(UNIX)
	INCLUDE("FindThirdPartyPkgConfig")
	pkg_check_modules(OIS OIS)
ENDIF(UNIX)

IF(OIS_FOUND)
	MESSAGE(STATUS "  Found OIS...")
	INCLUDE_DIRECTORIES(${OIS_INCLUDE_DIRS})
	ADD_DEFINITIONS(${OIS_CFLAGS})
	ADD_DEFINITIONS(${OIS_CFLAGS_OTHERS})
	LINK_DIRECTORIES(${OIS_LIBRARY_DIRS})
	FOREACH(OIS_LIB ${OIS_LIBRARIES})
		SET(OIS_LIB1 "OIS_LIB1-NOTFOUND")
		FIND_LIBRARY(OIS_LIB1 NAMES ${OIS_LIB} PATHS ${OIS_LIBRARY_DIRS} ${OIS_LIBDIR} NO_DEFAULT_PATH)
		FIND_LIBRARY(OIS_LIB1 NAMES ${OIS_LIB})
		IF(OIS_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${OIS_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${OIS_LIB1})
		ELSE(OIS_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${OIS_LIB}")
		ENDIF(OIS_LIB1)
	ENDFOREACH(OIS_LIB)

	ADD_DEFINITIONS(-DTARGET_HAS_ThirdPartyOIS)
ELSE(OIS_FOUND)
	MESSAGE(STATUS "  FAILED to find OIS...")
ENDIF(OIS_FOUND)
