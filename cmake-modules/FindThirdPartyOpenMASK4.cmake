# ---------------------------------
# Finds OMK4 toolkit
#
# Sets OMK4_FOUND
# Sets OMK4_LIBRARIES
# Sets OMK4_LIBRARY_DIRS
# Sets OMK4_LDFLAGS
# Sets OMK4_LDFLAGS_OTHERS
# Sets OMK4_INCLUDE_DIRS
# Sets OMK4_CFLAGS
# Sets OMK4_CFLAGS_OTHERS
#
# Adds library to target
# Adds include path
# ---------------------------------

IF(WIN32)
	FIND_PATH(PATH_OMK4 include/OMKBase.h PATHS $ENV{OV_DEP_OPENMASK} $ENV{OMK_HOME} $ENV{OMK_BIN})
	IF(PATH_OMK4)
		SET(OMK4_FOUND TRUE)
		SET(OMK4_INCLUDE_DIRS ${PATH_OMK4}/include)
		IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
			SET(OMK4_LIBRARIES DotSceneInterface_d Wm4Foundation80d OBT_d OMK_d OMKSimpleLoader_d OMKVis_d OMKAddOn_d ANTLR_d)
		ELSE(CMAKE_BUILD_TYPE STREQUAL "Debug")
			SET(OMK4_LIBRARIES DotSceneInterface Wm4Foundation80 OBT OMK OMKSimpleLoader OMKVis OMKAddOn ANTLR)
		ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")
		SET(OMK4_LIBRARY_DIRS ${PATH_OMK4}/lib )
	ENDIF(PATH_OMK4)
ENDIF(WIN32)

IF(UNIX)
	INCLUDE("FindThirdPartyPkgConfig")
	pkg_check_modules(OMK4 OMK)
ENDIF(UNIX)

IF(OMK4_FOUND)
	MESSAGE(STATUS "  Found OpenMASK 4...")
	INCLUDE_DIRECTORIES(${OMK4_INCLUDE_DIRS})
	ADD_DEFINITIONS(${OMK4_CFLAGS})
	ADD_DEFINITIONS(${OMK4_CFLAGS_OTHERS})
	LINK_DIRECTORIES(${OMK4_LIBRARY_DIRS})
	FOREACH(OMK4_LIB ${OMK4_LIBRARIES})
		SET(OMK4_LIB1 "OMK4_LIB1-NOTFOUND")
		FIND_LIBRARY(OMK4_LIB1 NAMES ${OMK4_LIB} PATHS ${OMK4_LIBRARY_DIRS} ${OMK4_LIBDIR} NO_DEFAULT_PATH)
		FIND_LIBRARY(OMK4_LIB1 NAMES ${OMK4_LIB})
		IF(OMK4_LIB1)
			MESSAGE(STATUS "    [  OK  ] Third party lib ${OMK4_LIB1}")
			TARGET_LINK_LIBRARIES(${PROJECT_NAME}-dynamic ${OMK4_LIB1})
		ELSE(OMK4_LIB1)
			MESSAGE(STATUS "    [FAILED] Third party lib ${OMK4_LIB}")
		ENDIF(OMK4_LIB1)
	ENDFOREACH(OMK4_LIB)

	ADD_DEFINITIONS(-DTARGET_HAS_ThirdPartyOMK4)
ELSE(OMK4_FOUND)
	MESSAGE(STATUS "  FAILED to find OpenMASK 4...")
ENDIF(OMK4_FOUND)
